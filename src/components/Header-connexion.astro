---
import instagramIconRaw from '../assets/icons/Instagram.svg?raw';
import dribbbleIconRaw from '../assets/icons/Dribble.svg?raw';
import twitterIconRaw from '../assets/icons/Twitter.svg?raw';
import linkedInIconRaw from '../assets/icons/LinkedIn.svg?raw';
import behanceIconRaw from '../assets/icons/Behance.svg?raw';
import { Fragment } from 'astro/jsx-runtime';

import imageAfrique from '../assets/img/Afrique-final.webp';
import imageAsie from '../assets/img/Asie-final.webp';
import imageEpiceries from '../assets/img/Epiceries-final.webp';
import imageEurope from '../assets/img/Europe-final.webp';
import imageLatino from '../assets/img/Latino-final.webp';
import imageRecettes from '../assets/img/Recettes-final.webp';

const menuItems = [
  { name: "Cuisine", href: "#", subItems: [
    { name: "Africaine", href: "/cuisine/africaine" },
    { name: "Asiatique", href: "/cuisine/asiatique" },
    { name: "Européenne", href: "/cuisine/europeenne" },
    { name: "Latino", href: "/cuisine/latino" },
  ]},
  { name: "Épiceries", href: "/epiceries" },
  { name: "Recettes", href: "/recettes" },
  { name: "Devenir partenaire", href: "/partenaire" },
  { name: "Connexion", href: "/auth/login" },
];

const footerLinks = [
    { name: "Contact", href: "/contact"},
    { name: "Mentions légales", href: "/mentions-legales"},
];

const socialLinks = [
    { name: "Instagram", href: "#", icon: instagramIconRaw},
    { name: "Dribbble", href: "#", icon: dribbbleIconRaw},
    { name: "Twitter", href: "#", icon: twitterIconRaw },
    { name: "LinkedIn", href: "#", icon: linkedInIconRaw },
    { name: "Behance", href: "#", icon: behanceIconRaw},
];

const cuisineSubItems = menuItems.find(item => item.name === "Cuisine")?.subItems || [];
const recettesItem = menuItems.find(item => item.name === "Recettes");
const epiceriesItem = menuItems.find(item => item.name === "Épiceries");

const baseMobileCardLinks = [
    cuisineSubItems.find(item => item.name === "Latino"),
    cuisineSubItems.find(item => item.name === "Européenne"),
    cuisineSubItems.find(item => item.name === "Africaine"),
    cuisineSubItems.find(item => item.name === "Asiatique"),
    recettesItem,
    epiceriesItem,
].filter(Boolean);

const imageMap = {
  "Latino": imageLatino,
  "Européenne": imageEurope,
  "Africaine": imageAfrique,
  "Asiatique": imageAsie,
  "Recettes": imageRecettes,
  "Épiceries": imageEpiceries,
};

type ImageMapKey = keyof typeof imageMap;

const mobileCardLinks = baseMobileCardLinks.map(item => ({
  ...item,
  imageSrc: item?.name && (item.name as ImageMapKey) in imageMap ? imageMap[item.name as ImageMapKey]?.src : undefined
}));

const contactItem = footerLinks.find(item => item.name === "Contact");
const connexionItem = menuItems.find(item => item.name === "Connexion");
const partenaireItem = menuItems.find(item => item.name === "Devenir partenaire");

const mobileFooterButtons = [
    contactItem,
    connexionItem,
    partenaireItem,
].filter(Boolean);

const chevronDownSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-1 inline-block transition-transform duration-300 group-hover:rotate-180"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.25 4.25a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z" clip-rule="evenodd" /></svg>`;
---

<header
  class="px-6 py-4 fixed z-30 w-full flex items-center justify-between transition-all duration-300 ease-in-out lg:py-0 bg-transparent lg:backdrop-blur-md"
  id="header"
  x-data="{
    isAuthenticated: false,
    init() {
      this.isAuthenticated = !!localStorage.getItem('pb_auth');
    },
    handleProtectedClick(event, href) {
      if (!this.isAuthenticated) {
        event.preventDefault();
        window.location.href = '/auth/login';
      } else {
        // Normal navigation - allow default link behavior
        window.location.href = href;
      }
    }
  }"
  @scroll.window="scrolled = (window.scrollY > 50)"
  x-init="init()"
  x-bind:class="{ 'lg:bg-white/80 lg:shadow-sm': scrolled }"
  x-data="{ scrolled: false }"
>
  {/* Logo */}
  <div class="flex items-center relative z-40">
    <a href="/" aria-label="Accueil Yumly">
      <span class="text-3xl lg:text-5xl font-bold text-(--color-orange-main) font-logo">yumly.</span>
    </a>
  </div>

  {/* Décoration Desktop */}
  <!-- Commented out for now -->

  {/* Conteneur Menu Toggle + Nav */}
  <div class="flex items-center gap-4">
    {/* Bouton Menu Mobile */}
    <button
      class="group relative z-40 flex h-6 w-8 flex-col justify-between *:h-[2px] *:w-full *:bg-black *:transition-all *:duration-300 *:ease lg:hidden"
      id="menu-btn"
      aria-label="Menu"
      aria-controls="menu"
      aria-expanded="false"
    >
      <span class="group-aria-expanded:translate-y-[10.5px] group-aria-expanded:rotate-135"></span>
      <span class="group-aria-expanded:opacity-0"></span>
      <span class="group-aria-expanded:-translate-y-[10.5px] group-aria-expanded:-rotate-135"></span>
    </button>

    {/* Navigation */}
    <nav
      class="
        fixed z-30 inset-0 flex flex-col
        transition-transform duration-300 ease-in-out
        max-lg:aria-hidden:invisible max-lg:aria-hidden:-translate-x-full
        max-lg:bg-(--color-background)
        lg:relative lg:flex-row lg:items-center lg:bg-transparent lg:translate-x-0 lg:text-sm lg:font-bold lg:uppercase lg:tracking-wide lg:text-black
      "
      id="menu"
      aria-hidden="true"
    >
      {/* === Section Menu Mobile === */}
      <div class="lg:hidden flex flex-col h-full w-full p-5 pt-12">
        {/* Cartes Mobiles */}
        <div class="flex-grow overflow-hidden flex items-center">
          <div class="flex gap-4 overflow-x-auto pb-4 scrollbar-hide">
            {mobileCardLinks.map((item) => (
              <a
                href={item.href}
                class="flex-shrink-0 w-70 aspect-[3/5] rounded-lg overflow-hidden relative group bg-white shadow-md"
                @click.prevent="handleProtectedClick($event, '{item.href}')"
              >
                <div class="relative h-1/4 bg-(--color-orange-main) border-b-2 border-white flex items-center justify-center p-2 z-10">
                   <h3 class="text-white text-3xl font-bold uppercase font-logo tracking-wide text-center">{item.name}</h3>
                </div>
                {item.imageSrc && (
                   <img
                     src={item.imageSrc}
                     alt={`Image pour ${item.name}`}
                     class="absolute bottom-0 left-0 w-full h-3/4 object-cover transition-transform duration-300 group-hover:scale-105 z-0"
                     loading="lazy"
                   />
                )}
              </a>
            ))}
          </div>
        </div>

        {/* Footer Mobile */}
        <div class="flex-shrink-0 pt-6 text-center">
          <div class="flex justify-center gap-4 mb-4 text-(--color-text-secondary) items-center">
            {socialLinks.map(link => (
              <a
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={link.name}
                class="hover:text-(--color-primary) flex items-center justify-center w-9 h-9" 
              >
                <Fragment set:html={link.icon} />
              </a>
            ))}
          </div>
          <p class="text-xs text-(--color-text-muted) mb-2">Site par Camille, Lison & Léo</p>
          <hr class="border-t border-(--color-border-light) w-1/2 mx-auto mb-4" />
          <div class="flex justify-center px-2">
            <div class="grid grid-cols-3 gap-2 w-auto">
              {mobileFooterButtons.map(link => (
                <a
                  href={link.href}
                  class="px-3 py-2 text-xs rounded-full bg-(--color-orange-main) text-white hover:bg-(--color-primary) hover:text-white transition-colors w-full text-center font-logo font-bold flex items-center justify-center min-h-[2.5rem]"
                  @click.prevent="handleProtectedClick($event, '{link.href}')"
                >
                  <span>{link.name}</span>
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* === Section Menu Desktop === */}
      <ul class="hidden lg:flex lg:items-center *:relative *:overflow-hidden *:lg:before:absolute *:lg:before:bottom-0 *:lg:before:left-0 *:lg:before:h-2 *:lg:before:w-full *:lg:before:translate-y-2 *:lg:before:transition-all *:lg:before:duration-300 *:lg:before:ease-in-out *:lg:hover:before:translate-y-0">
        {menuItems.map((item) => (
          <li class:list={["lg:before:bg-(--color-orange)", {"group lg:hover:overflow-visible": item.subItems?.length}]}>
            <div class="relative">
              <a
                href={item.href}
                @click.prevent="handleProtectedClick($event, '{item.href}')"
                class="px-5 py-8 flex items-center cursor-pointer"
                class:list={[{"pointer-events-none lg:pointer-events-auto" : item.subItems?.length}]}
              >
                {item.name}
                {item.name === "Cuisine" && item.subItems?.length && (
                  <Fragment set:html={chevronDownSvg} />
                )}
              </a>
              {item.subItems?.length && (
                <div class="
                  lg:absolute lg:left-1/2 lg:-translate-x-1/2 lg:top-full lg:mt-1
                  lg:invisible lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100
                  lg:bg-(--color-orange-light) lg:shadow-md lg:rounded-md lg:p-2 lg:w-64 lg:z-30
                  lg:transition-all lg:duration-300 lg:border-2 lg:border-black
                ">
                  <ul>
                    {item.subItems.map(subItem => (
                      <li class="lg:hover:bg-(--color-orange) lg:rounded">
                        <a
                          href={subItem.href}
                          @click.prevent="handleProtectedClick($event, '{subItem.href}')"
                          class="block px-5 py-3 text-black"
                        >
                          {subItem.name}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</header>

<script>
  // --- Script JS (inchangé) ---
  // ... (tout le script reste identique) ...
  const toggle = document.querySelector("#menu-btn");
  const nav = document.querySelector("#menu");
  const page = document.body;

  if (toggle && nav) {
    toggle.addEventListener("click", () => {
      const isOpen = toggle.getAttribute("aria-expanded") === "true";
      toggle.setAttribute("aria-expanded", String(!isOpen));
      nav.setAttribute("aria-hidden", String(isOpen));
      page.classList.toggle("overflow-hidden", !isOpen);
    });

    const mobileLinks = nav.querySelectorAll('.lg\\:hidden a');
    mobileLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth < 1024 && toggle.getAttribute("aria-expanded") === "true") {
          toggle.setAttribute("aria-expanded", "false");
          nav.setAttribute("aria-hidden", "true");
          page.classList.remove("overflow-hidden");
        }
      });
    });
  }

  const navBar = document.querySelector("#header");
  let lastScrollY = window.scrollY;
  let ticking = false;
  const offset = 50;

  function handleScroll() {
    const currentScrollY = window.scrollY;
    const isMobileMenuOpen = toggle?.getAttribute("aria-expanded") === "true";

    if (isMobileMenuOpen && window.innerWidth < 1024) {
      navBar.classList.remove("-translate-y-full");
      ticking = false;
      return;
    }

    if (currentScrollY > lastScrollY && currentScrollY > offset) {
      navBar.classList.add("-translate-y-full");
    } else if (currentScrollY < lastScrollY || currentScrollY <= offset) {
      navBar.classList.remove("-translate-y-full");
    }

    lastScrollY = currentScrollY <= 0 ? 0 : currentScrollY;
    ticking = false;
  }

  window.addEventListener("scroll", () => {
    if (!ticking) {
      window.requestAnimationFrame(handleScroll);
      ticking = true;
    }
  });

  const style = document.createElement('style');
  style.innerHTML = `.scrollbar-hide::-webkit-scrollbar { display: none; } .scrollbar-hide { -ms-overflow-style: none; scrollbar-width: none; }`;
  document.head.appendChild(style);
</script>