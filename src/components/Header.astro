---
import instagramIconRaw from '../assets/icons/Instagram.svg?raw';
import dribbbleIconRaw from '../assets/icons/Dribble.svg?raw'; 
import twitterIconRaw from '../assets/icons/Twitter.svg?raw';   
import linkedInIconRaw from '../assets/icons/LinkedIn.svg?raw'; 
import behanceIconRaw from '../assets/icons/Behance.svg?raw';   

console.log("Instagram Icon Import:", typeof instagramIconRaw, instagramIconRaw);


const menuItems = [
  { name: "Cuisine", href: "#", subItems: [
    { name: "Africaine", href: "/cuisine/africaine" },
    { name: "Asiatique", href: "/cuisine/asiatique" },
    { name: "Européenne", href: "/cuisine/europeenne" },
    { name: "Latino", href: "/cuisine/latino" },
  ]},
  { name: "Épiceries", href: "/epiceries" },
  { name: "Recettes", href: "/recettes" },
  { name: "Devenir partenaire", href: "/partenaire" },
  { name: "Connexion", href: "/connexion" },
];

const footerLinks = [
    { name: "Contact", href: "/contact"},
    { name: "Connexion", href: "/connexion"},
    { name: "Mentions légales", href: "/mentions-legales"},
];

// TODO: Remplacer par tes vraies URLs de réseaux sociaux
const socialLinks = [
    { name: "Instagram", href: "#", icon: instagramIconRaw}, 
    { name: "Dribbble", href: "#", icon: dribbbleIconRaw},  
    { name: "Twitter", href: "#", icon: twitterIconRaw },   
    { name: "LinkedIn", href: "#", icon: linkedInIconRaw }, 
    { name: "Behance", href: "#", icon: behanceIconRaw},   
];
---

<header
  class="px-6 py-4 fixed z-30 w-full flex items-center justify-between transition-all duration-300 ease-in-out lg:py-0 bg-(--color-background) lg:backdrop-blur-md"
  id="header"
  x-data="{ scrolled: false }"
  @scroll.window="scrolled = (window.scrollY > 50)"
  :class="{ 'lg:bg-white/80 lg:shadow-sm': scrolled }"  
>
  <div class="flex items-center relative z-40">
    <a href="/" aria-label="Accueil Yumly">
      <span class="text-2xl font-bold text-(--color-primary) font-logo">yumly.</span>
    </a>
  </div>

  <div class="hidden lg:block absolute bottom-0 left-0 w-full h-[2px] bg-transparent z-0">
    <div class="absolute left-0 w-[calc(50%-28px)] h-full bg-black"></div>
    <div class="absolute right-0 w-[calc(50%-28px)] h-full bg-black"></div>
    <div class="absolute left-1/2 -translate-x-1/2 translate-y-[-100%] w-[60px] h-[30px] bg-(--color-background) border-x-[2px] border-t-[2px] border-black rounded-t-full z-10"></div>
    <div class="absolute left-1/2 -translate-x-1/2 translate-y-[-50%] w-[32px] h-[32px] bg-(--color-background) border-[2px] border-black rounded-full flex items-end overflow-hidden z-20 rotate-180">
      <div class="w-full h-1/2 bg-black"></div>
    </div>
  </div>

  <div class="flex items-center gap-4">
    <button
      class="group relative z-40 flex h-6 w-8 flex-col justify-between *:h-[2px] *:w-full *:bg-black *:transition-all *:duration-300 *:ease lg:hidden"
      id="menu-btn"
      aria-label="Menu"
      aria-controls="menu"
      aria-expanded="false"
    >
      <span class="group-aria-expanded:translate-y-[10.5px] group-aria-expanded:rotate-135"></span>
      <span class="group-aria-expanded:opacity-0"></span>
      <span class="group-aria-expanded:-translate-y-[10.5px] group-aria-expanded:-rotate-135"></span>
    </button>

    <nav
    class="
      fixed z-30 inset-0 flex flex-col
      transition-transform duration-300 ease-in-out
      max-lg:aria-hidden:invisible max-lg:aria-hidden:-translate-x-full
      max-lg:bg-(--color-background)
      lg:relative lg:flex-row lg:items-center lg:bg-transparent lg:translate-x-0 lg:text-sm lg:font-bold lg:uppercase lg:tracking-wide lg:text-black
    "
    id="menu"
    aria-hidden="true"
  >
    {/* Mobile Menu Section */}
    <div class="lg:hidden flex flex-col h-full w-full p-5 pt-20">
      <div class="flex-grow overflow-hidden flex items-center">
        <div class="flex gap-4 overflow-x-auto pb-4 scrollbar-hide">
          {menuItems.map((item, index) => (
            <a
              href={item.href}
              // CHANGE HERE: Updated aspect ratio from aspect-[3/4] to aspect-[3/5]
              class="flex-shrink-0 w-70 aspect-[3/5] rounded-lg overflow-hidden relative group"
            >
              {/* Fond de couleur orange au lieu d'une image */}
              <div class="absolute inset-0 w-full h-full bg-(--color-orange-main) transition-transform duration-300 group-hover:scale-105"></div>

              {/* Titre centré et agrandi */}
              <div class="absolute inset-0 flex items-top pt-4 justify-center">
                <h3 class="text-white text-3xl font-bold uppercase font-logo tracking-wide">{item.name}</h3>
              </div>
            </a>
          ))}
        </div>
      </div>

      {/* Mobile Footer Section (unchanged) */}
      <div class="flex-shrink-0 pt-6 text-center">
        <div class="flex justify-center gap-4 mb-4 text-(--color-text-secondary) items-center">
          {socialLinks.map(link => (
            <a href={link.href} target="_blank" rel="noopener noreferrer" aria-label={link.name} class="hover:text-(--color-primary)">
              {/* set:html recevra maintenant la chaîne SVG de link.icon (qui vient de .default) */}
              <Fragment set:html={link.icon} />
            </a>
          ))}
        </div>
        <p class="text-xs text-(--color-text-muted) mb-2">Site par Camille, Lison & Léo</p>
        <hr class="border-t border-(--color-border-light) w-1/2 mx-auto mb-4" />
        <div class="flex justify-center gap-2">
          {footerLinks.map(link => (
            <a href={link.href} class="px-4 py-2 text-sm rounded-full bg-(--color-primary-light) text-(--color-primary-dark) hover:bg-(--color-primary) hover:text-white transition-colors">
              {link.name}
            </a>
          ))}
        </div>
      </div>
    </div>

    {/* Desktop Menu Section (unchanged) */}
    <ul class="hidden lg:flex lg:items-center *:relative *:overflow-hidden *:lg:before:absolute *:lg:before:bottom-0 *:lg:before:left-0 *:lg:before:h-2 *:lg:before:w-full *:lg:before:translate-y-2 *:lg:before:transition-all *:lg:before:duration-300 *:lg:before:ease-in-out *:lg:hover:before:translate-y-0">
      {menuItems.map((item) => (
        <li class:list={["lg:before:bg-(--color-orange)", {"group lg:hover:overflow-visible": item.subItems?.length}]}>
          <div class="relative">
            <a
              class="px-5 py-8 flex items-center cursor-pointer"
              href={item.href}
              class:list={[{"pointer-events-none lg:pointer-events-auto" : item.subItems?.length}]}
            >
              {item.name}
            </a>

            {item.subItems?.length && (
              <div class="lg:absolute lg:left-0 lg:top-full lg:invisible lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100 lg:bg-(--color-orange-light) lg:shadow-md lg:rounded-md lg:p-2 lg:w-64 lg:z-30 lg:transition-all lg:duration-300 lg:border-2 lg:border-black">
                <ul class="">
                  {item.subItems.map(subItem => (
                    <li class="lg:hover:bg-(--color-orange) lg:rounded">
                      <a class="block px-5 py-3" href={subItem.href}>
                        {subItem.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </li>
      ))}
    </ul>
  </nav>
  </div>
</header>

<script>
  // Gestion du menu mobile (ouverture/fermeture)
  const toggle = document.querySelector("#menu-btn");
  const nav = document.querySelector("#menu");
  const page = document.body;

  if (toggle && nav) {
    toggle.addEventListener("click", () => {
      const isOpen = toggle.getAttribute("aria-expanded") === "true";
      toggle.setAttribute("aria-expanded", String(!isOpen));
      nav.setAttribute("aria-hidden", String(isOpen));
      page.classList.toggle("overflow-hidden", !isOpen);
    });

    // Fermer le menu si on clique sur un lien de carte
    const mobileLinks = nav.querySelectorAll('.lg\\:hidden a');
    mobileLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth < 1024) { 
          toggle.setAttribute("aria-expanded", "false");
          nav.setAttribute("aria-hidden", "true");
          page.classList.remove("overflow-hidden");
        }
      });
    });
  }

  // Gestion du scroll header
  const navBar = document.querySelector("#header");
  let lastScrollY = window.scrollY;
  let ticking = false;
  const offset = 50;

  function handleScroll() {
    const currentScrollY = window.scrollY;
    const isMobileMenuOpen = toggle?.getAttribute("aria-expanded") === "true";

    // Ne pas cacher le header si le menu mobile est ouvert
    if (isMobileMenuOpen && window.innerWidth < 1024) {
      navBar.classList.remove("-translate-y-full");
      ticking = false;
      return;
    }

    if (currentScrollY > lastScrollY && currentScrollY > offset) {
      // Scrolling down
      navBar.classList.add("-translate-y-full");
    } else if (currentScrollY < lastScrollY || currentScrollY <= offset) {
      // Scrolling up or near top
      navBar.classList.remove("-translate-y-full");
    }

    lastScrollY = currentScrollY <= 0 ? 0 : currentScrollY;
    ticking = false;
  }

  window.addEventListener("scroll", () => {
    if (!ticking) {
      window.requestAnimationFrame(handleScroll);
      ticking = true;
    }
  });

  // Ajouter une classe pour masquer les scrollbars si nécessaire
  const style = document.createElement('style');
  style.innerHTML = `.scrollbar-hide::-webkit-scrollbar { display: none; } .scrollbar-hide { -ms-overflow-style: none; scrollbar-width: none; }`;
  document.head.appendChild(style);
</script>