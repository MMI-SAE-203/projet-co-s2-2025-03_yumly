---

interface Item {
  image: string;
  alt: string;
  name?: string; // Ajout du nom optionnel
  title?: string;
  content?: string;
}

interface Props {
  items: Item[];
  backgroundUrl?: string;
  itemWidthClass?: string;
  itemHeightClass?: string;
  gapClass?: string;
  containerPaddingClass?: string;
  showNames?: boolean; // Nouveau paramètre pour afficher les noms
}

const {
  items = [],
  backgroundUrl, 
  itemWidthClass = "w-40 sm:w-48", 
  itemHeightClass = "h-40 sm:h-48",
  gapClass = "gap-6 md:gap-10", 
  containerPaddingClass = "py-10 px-4",
  showNames = false // Par défaut, on n'affiche pas les noms
} = Astro.props;
---

{/* Conteneur principal avec l'image de fond */}
<div
  class:list={[
    "minimal-scroll-carousel-container relative w-full",
    containerPaddingClass // Applique le padding autour
  ]}
  style={backgroundUrl ? `
    background-image: url(${backgroundUrl});
    background-size: auto 100%; 
    background-repeat: repeat-x;
    image-rendering: pixelated; 
  ` : ''}
>
  <div
    class:list={[
      "scroll-content flex", 
      showNames ? "items-start" : "items-center", // Si on affiche les noms, on aligne en haut
      gapClass,
      "overflow-x-auto scroll-smooth snap-x snap-mandatory",
      "cursor-grab active:cursor-grabbing",
      "scrollbar-hide"
    ]}
    data-carousel-scrollable>

    {/* Itération sur les items */}
    {items.map((item) => (
      <div class:list={["flex-shrink-0 snap-center", showNames ? "flex flex-col items-center" : "", itemWidthClass, !showNames ? itemHeightClass : ""]}>
        {/* Image */}
        <div class:list={[showNames ? itemHeightClass : "h-full", "w-full", showNames ? "mb-2" : ""]}>
          <img
            src={item.image}
            alt={item.alt}
            class="w-full h-full object-contain block"
            loading="lazy"
            draggable="false"
          />
        </div>
        
        {/* Nom du produit (affiché seulement si showNames est true et que le nom existe) */}
        {showNames && item.name && (
          <h3 class="text-sm font-medium text-gray-800 text-center leading-tight">
            {item.name}
          </h3>
        )}
      </div>
    ))}
  </div>
</div>

<style>
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}
.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const scrollContainers = document.querySelectorAll('[data-carousel-scrollable]');
    scrollContainers.forEach(slider => {
      let isDown = false;
      let startX;
      let scrollLeft;

      slider.addEventListener('mousedown', (e) => {
        e.preventDefault();
        isDown = true;
        slider.classList.add('active:cursor-grabbing');
        startX = e.pageX - (slider as HTMLElement).offsetLeft;
        scrollLeft = slider.scrollLeft;
      });
      slider.addEventListener('mouseleave', () => { isDown = false; slider.classList.remove('active:cursor-grabbing'); });
      slider.addEventListener('mouseup', () => { isDown = false; slider.classList.remove('active:cursor-grabbing'); });
      slider.addEventListener('mousemove', (e) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - (slider as HTMLElement).offsetLeft;
        const walk = (x - startX);
        slider.scrollLeft = scrollLeft - walk;
      });

      slider.addEventListener('touchstart', (e) => { const touch = e.touches[0]; isDown = true; startX = touch.pageX - (slider as HTMLElement).offsetLeft; scrollLeft = slider.scrollLeft; }, { passive: true });
      slider.addEventListener('touchend', () => { isDown = false; });
      slider.addEventListener('touchcancel', () => { isDown = false; });
      slider.addEventListener('touchmove', (e) => { if (!isDown) return; const touch = e.touches[0]; const x = touch.pageX - (slider as HTMLElement).offsetLeft; const walk = (x - startX); slider.scrollLeft = scrollLeft - walk; }, { passive: true });
    });
  });
</script>