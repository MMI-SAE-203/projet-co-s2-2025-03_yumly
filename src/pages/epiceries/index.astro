---
import Layout from "../../layouts/Layout.astro";
import "../../styles/global.css";

import epiceriesImage from "../../assets/img/Epiceries-final.webp";

import { getAllEpiceries } from "../../../backend/testback.js";
const epiceries = await getAllEpiceries();

import iconePerso1 from "../../assets/icons/perso1.svg";
import iconePerso2 from "../../assets/icons/perso2.svg";
import iconePerso3 from "../../assets/icons/perso3.svg";
import iconePerso4 from "../../assets/icons/perso4.svg";
import iconePerso5 from "../../assets/icons/perso5.svg";

const testimonials = [
  {
    name: "Françoise",
    city: "Marseille",
    avatar: iconePerso1,
    rating: 5,
    quote:
      "J'adore la cuisine chinoise, Yumly a été pour moi la solution pour retrouver tous les produits que j'aime, le plus simplement possible !",
  },
  {
    name: "Mélissa",
    city: "Paris",
    avatar: iconePerso2,
    rating: 5,
    quote:
      "Grâce à Yumly j'ai découvert des épiceries proches de chez moi, et j'ai pu découvrir une toute nouvelle culture culinaire !",
  },
  {
    name: "Xavier",
    city: "Paris",
    avatar: iconePerso3,
    rating: 5,
    quote:
      "Moi qui adore cuisiner mexicain, Yumly m'a aidé à dénicher les meilleurs produits et où les commander facilement. Super pratique !",
  },
  {
    name: "Michelle",
    city: "Toulouse",
    avatar: iconePerso4,
    rating: 5,
    quote:
      "Étant fan de nourriture, je n'ai pas pu passer à côté de Yumly. Je peux simplifier mes courses en produits exotiques !",
  },
  {
    name: "Tariq",
    city: "Lyon",
    avatar: iconePerso5,
    rating: 5,
    quote:
      "Yumly m'a fait redécouvrir les produits libanais de mon enfance. Un vrai plaisir !",
  },
  {
    name: "Camille",
    city: "Lille",
    avatar: iconePerso2,
    rating: 5,
    quote:
      "J'ai pu trouver des épiceries coréennes dans ma ville. J'ai adoré le concept Yumly !",
  },
  {
    name: "Nadia",
    city: "Strasbourg",
    avatar: iconePerso1,
    rating: 5,
    quote:
      "Un gain de temps énorme ! Je découvre et je cuisine des plats que je n'aurais jamais osé faire avant.",
  },
  {
    name: "Joel",
    city: "Paris",
    avatar: iconePerso3,
    rating: 5,
    quote:
      "Merci Yumly ! Je découvre de nouvelles recettes tous les jours, qui donnent plus envie les unes que les autres !",
  },
];

// Fonction pour extraire la ville de l'adresse de manière plus robuste
function extractCity(address) {
  if (!address) return '';
  
  // Nettoyer l'adresse
  const cleanAddress = address.trim();
  
  // Plusieurs patterns pour extraire la ville
  const patterns = [
    /,\s*(\d{5})\s+([^,]+)$/,  // ", 75001 Paris"
    /,\s*([^,\d]+)\s*$/,       // ", Paris"
    /(\d{5})\s+([^,]+)$/,      // "75001 Paris"
  ];
  
  for (const pattern of patterns) {
    const match = cleanAddress.match(pattern);
    if (match) {
      const city = match[2] || match[1];
      return city.trim();
    }
  }
  
  // Si aucun pattern ne fonctionne, prendre le dernier élément après la virgule
  const parts = cleanAddress.split(',');
  if (parts.length > 1) {
    const lastPart = parts[parts.length - 1].trim();
    // Enlever le code postal s'il est présent
    const cityMatch = lastPart.match(/^\d{5}\s+(.+)$/) || lastPart.match(/^(.+)$/);
    return cityMatch ? cityMatch[1] || cityMatch[0] : '';
  }
  
  return '';
}

// Fonction pour déterminer le continent basé sur le nom de l'épicerie
function determineContinent(nomEpicerie) {
  const nom = nomEpicerie.toLowerCase();
  
  // Mots-clés pour l'Asie
  const asieKeywords = ['asie', 'asiatique', 'chinois', 'chinoise', 'japonais', 'japonaise', 'coréen', 'coréenne', 'thaï', 'thaïlandais', 'vietnamien', 'vietnamienne', 'indien', 'indienne', 'sushi', 'ramen', 'pho', 'dim sum', 'bao', 'wok', 'oriental', 'extrême-orient'];
  
  // Mots-clés pour l'Europe
  const europeKeywords = ['europe', 'européen', 'européenne', 'italien', 'italienne', 'français', 'française', 'espagnol', 'espagnole', 'allemand', 'allemande', 'anglais', 'anglaise', 'grec', 'grecque', 'russe', 'polonais', 'polonaise', 'pizza', 'pasta', 'delicatessen', 'boulangerie', 'fromage'];
  
  // Mots-clés pour l'Afrique
  const afriqueKeywords = ['afrique', 'africain', 'africaine', 'maghreb', 'maghrébin', 'marocain', 'marocaine', 'tunisien', 'tunisienne', 'algérien', 'algérienne', 'éthiopien', 'éthiopienne', 'sénégalais', 'sénégalaise', 'halal', 'couscous', 'tagine', 'harissa'];
  
  // Mots-clés pour l'Amérique Latine
  const ameriqueLatineKeywords = ['amérique', 'latino', 'latina', 'mexicain', 'mexicaine', 'brésilien', 'brésilienne', 'argentin', 'argentine', 'péruvien', 'péruvienne', 'colombien', 'colombienne', 'tacos', 'burrito', 'empanada', 'ceviche', 'churrasco'];
  
  if (asieKeywords.some(keyword => nom.includes(keyword))) {
    return 'asie';
  } else if (europeKeywords.some(keyword => nom.includes(keyword))) {
    return 'europe';
  } else if (afriqueKeywords.some(keyword => nom.includes(keyword))) {
    return 'afrique';
  } else if (ameriqueLatineKeywords.some(keyword => nom.includes(keyword))) {
    return 'amerique-latine';
  }
  
  return 'autre'; // Par défaut
}

// Extraire les villes et continents des épiceries
const epiceriesWithCities = epiceries.map(ep => ({
  ...ep,
  city: extractCity(ep.adresse_epicerie),
  continent: determineContinent(ep.nom_epicerie)
}));
---

<Layout
  title="Cuisine Asiatique"
  description="Yumly - Découvrez la cuisine asiatique !"
>
  <main class="relative bg-[var(--color-background)] overflow-hidden pb-24">
    <!-- Titre Epicerie -->
    <div class="relative z-20 flex justify-center">
      <h1
        class="text-[8rem] md:text-[6rem] font-extrabold text-[var(--color-orange-main)] leading-none font-[var(--font-logo)] mt-25 mb-[-2rem] px-0 sm:px-[5px]"
      >
        ÉPICERIE
      </h1>
    </div>
    <!-- Image Épicerie tournée -->
    <div class="relative z-10 flex justify-center">
      <img
        src={epiceriesImage.src}
        alt="Épicerie du monde"
        class="w-full max-w-[450px] h-auto transform"
      />
    </div>
    <!-- Bandeau défilant infini de gauche à droite -->
    <div class="overflow-hidden whitespace-nowrap mt-6 relative">
      <div class="marquee-track">
        <span class="marquee-text">
          ÉPICERIE D'ASIE - ÉPICERIE D'EUROPE - ÉPICERIE D'AFRIQUE - ÉPICERIE
          AMÉRIQUE LATINE —
        </span>
        <span class="marquee-text">
          ÉPICERIE D'ASIE - ÉPICERIE D'EUROPE - ÉPICERIE D'AFRIQUE - ÉPICERIE
          AMÉRIQUE LATINE —
        </span>
      </div>
    </div>

    <section class="epiceries-section">
      
      <!-- Filtres et recherche améliorés -->
      <div class="filters-container">
        <button class="filter-btn active" data-filter="all">Toutes</button>
        <button class="filter-btn" data-filter="asie">Asie</button>
        <button class="filter-btn" data-filter="europe">Europe</button>
        <button class="filter-btn" data-filter="afrique">Afrique</button>
        <button class="filter-btn" data-filter="amerique-latine">Amérique Latine</button>
        
        <!-- Barre de recherche -->
        <div class="search-container">
          <input 
            type="text" 
            id="searchInput" 
            placeholder="Rechercher par ville ou nom d'épicerie..."
            class="search-input"
          />
          <button type="button" class="search-btn">
            <svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Compteur de résultats -->
      <div class="result-counter">
        <span id="resultCount"></span>
      </div>
    
      <!-- Grille épiceries améliorée -->
      <div id="epicerieGrid" class="epiceries-grid">
        {
          epiceriesWithCities.map(ep => {
            const citySlug = ep.city.toLowerCase().replace(/\s+/g, '-');
            
            return (
              <div class="product-card"
                   data-city={citySlug}
                   data-city-display={ep.city}
                   data-name={ep.nom_epicerie.toLowerCase()}
                   data-rating={ep.avis_epicerie}
                   data-continent={ep.continent}
                   data-id={ep.id}>
                
                <div class="card-image-container">
                  <img 
                    src={`https://pb-yumly.leo-baudry.fr/api/files/Epicerie/${ep.id}/${ep.photo_epicerie}`} 
                    alt={ep.nom_epicerie}
                    class="card-image"
                  />
                  <div class="rating-badge">
                    {ep.avis_epicerie?.toFixed(1) || '0.0'} ★
                  </div>
                  <!-- Bouton Like -->
                  <button class="like-btn" data-id={ep.id} title="Ajouter aux favoris">
                    <svg class="heart-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                    </svg>
                  </button>
                </div>
      
                <div class="card-content">
                  <h3 class="card-title">{ep.nom_epicerie}</h3>
                  <p class="card-location">
                    <svg class="location-icon" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                    </svg>
                    {ep.city || 'Ville non spécifiée'}
                  </p>
                  
                  <!-- Étoiles améliorées -->
                  <div class="stars-container">
                    {Array.from({ length: 5 }).map((_, i) => (
                      <span class={`star ${i < Math.round(ep.avis_epicerie || 0) ? 'star-filled' : 'star-empty'}`}>★</span>
                    ))}
                    <span class="rating-text">({ep.avis_epicerie?.toFixed(1) || '0.0'})</span>
                  </div>
                  
                  <!-- Boutons améliorés -->
                  <div class="buttons-container">
                    <a href={`/epiceries/${ep.id}`} class="btn-primary">
                      En savoir plus
                    </a>
                    <button onclick={`voirLieu('${ep.city}')`} class="btn-secondary">
                      Lieu
                    </button>
                  </div>
                </div>
              </div>
            );
          })
        }
      </div>

      <!-- Message si aucun résultat -->
      <div id="noResults" class="no-results hidden">
        <img 
          src="/src/assets/icons/green-search.svg" 
          alt="Icône de recherche" 
          class="no-results-icon w-16 h-16 mx-auto mb-4" 
        />
        <h3 class="no-results-title">Aucune épicerie trouvée</h3>
        <p class="no-results-text">
          Essayez de changer vos filtres ou votre recherche pour voir plus de résultats.
        </p>
      </div>
      

    <!-- Titre CE QU'ILS DISENT en dehors du fond vert -->
    <div class="relative z-10 text-center mt-50 mb-[-1.5rem]">
      <div
        class="bg-orange-main text-white font-bold text-lg py-3 px-6 inline-block rounded shadow-md z-20 relative"
      >
        CE QU'ILS DISENT
      </div>
    </div>

    <!-- Carousel Avis dans fond vert -->
    <section class="relative pt-[3rem] px-4 bg-green-main overflow-hidden z-0 pb-5 mb-55">
      <div x-data class="flex gap-6 overflow-x-auto px-4 scrollbar-hide pb-10">
        {
          testimonials.map((t, index) => (
            <div
              class="flex-shrink-0 w-64 bg-background p-5 rounded-lg shadow-md text-center"
              key={index}
            >
              <img
                src={t.avatar.src}
                alt={`Avatar de ${t.name}`}
                class="w-20 h-20 object-cover rounded-full border-4 border-orange-main mx-auto mb-4"
              />
              <div class="flex justify-center mb-2 text-orange-main">
                {Array.from({ length: t.rating }).map((_, i) => (
                  <span key={i} class="text-xl">
                    ★
                  </span>
                ))}
              </div>
              <p class="font-semibold text-grey-9">
                {t.name} ({t.city})
              </p>
              <p class="text-grey-7 text-sm italic mt-2">{t.quote}</p>
            </div>
          ))
        }
      </div>
    </section>
  </main>
</Layout>

<style>
  /* Section épiceries */
  .epiceries-section {
    padding: 2.5rem 1rem;
    background: var(--color-background);
  }

  /* Filtres */
  .filters-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    align-items: center;
    margin-bottom: 2rem;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    background: var(--color-grey-1);
    border: 2px solid var(--color-grey-3);
    border-radius: 0.5rem;
    font-weight: 500;
    transition: all 0.3s ease;
    cursor: pointer;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .filter-btn:hover {
    border-color: var(--color-orange-main);
    color: var(--color-orange-main);
    transform: translateY(-2px);
  }

  .filter-btn.active {
    background: var(--color-orange-main);
    color: var(--color-grey-1);
    border-color: var(--color-orange-main);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(255, 102, 34, 0.3);
  }

  /* Barre de recherche */
  .search-container {
    position: relative;
    display: flex;
    align-items: center;
    min-width: 300px;
  }

  .search-input {
    width: 100%;
    padding: 0.5rem 2.5rem 0.5rem 1rem;
    border: 2px solid var(--color-grey-3);
    border-radius: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.3s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-orange-main);
    box-shadow: 0 0 0 3px rgba(255, 102, 34, 0.1);
  }

  .search-btn {
    position: absolute;
    right: 0.5rem;
    padding: 0.25rem;
    background: none;
    border: none;
    cursor: pointer;
    color: var(--color-grey-5);
    transition: color 0.3s ease;
  }

  .search-btn:hover {
    color: var(--color-orange-main);
  }

  .search-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  /* Compteur de résultats */
  .result-counter {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  #resultCount {
    color: var(--color-grey-6);
    font-weight: 500;
  }

  /* Grille épiceries */
  .epiceries-grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 1.5rem;
    max-width: 1280px;
    margin: 0 auto;
  }

  @media (min-width: 640px) {
    .epiceries-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .epiceries-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1280px) {
    .epiceries-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  /* Cards */
  .product-card {
    background: var(--color-grey-1);
    border-radius: 0.75rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: all 0.3s ease;
    animation: fadeIn 0.5s ease-in;
  }


  .card-image-container {
    position: relative;
  }

  .card-image {
    width: 100%;
    height: 12rem;
    object-fit: cover;
  }

  .rating-badge {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 9999px;
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-grey-8);
  }

  /* Badge continent */
  .continent-badge {
    position: absolute;
    bottom: 0.5rem;
    right: 0.5rem;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
    backdrop-filter: blur(4px);
  }

  /* Bouton Like */
  .like-btn {
    position: absolute;
    top: 0.75rem;
    left: 0.75rem;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    padding: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(4px);
  }

  .like-btn:hover {
    background: rgba(255, 255, 255, 1);
    transform: scale(1.1);
  }

  .like-btn.liked {
    background: var(--color-orange-main);
    color: var(--color-grey-1);
  }

  .like-btn.liked:hover {
    background: var(--color-orange-shade-1);
  }

  .heart-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .like-btn.liked .heart-icon {
    fill: currentColor;
  }

  .card-content {
    padding: 1.25rem;
  }

  .card-title {
    font-weight: bold;
    font-size: 1.125rem;
    color: var(--color-grey-9);
    margin-bottom: 0.5rem;
  }

  .card-location {
    color: var(--color-grey-6);
    font-size: 0.875rem;
    margin-bottom: 0.75rem;
    display: flex;
    align-items: center;
  }

  .location-icon {
    width: 1rem;
    height: 1rem;
    margin-right: 0.25rem;
    color: var(--color-grey-5);
  }

  .stars-container {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .star {
    font-size: 1rem;
  }

  .star-filled {
    color: var(--color-orange-shade-2);
  }

  .star-empty {
    color: var(--color-grey-4);
  }

  .rating-text {
    margin-left: 0.5rem;
    font-size: 0.875rem;
    color: var(--color-grey-6);
  }

  .buttons-container {
    display: flex;
    gap: 0.5rem;
  }

  .btn-primary {
    background: var(--color-orange-main);
    color: var(--color-grey-1);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    transition: all 0.3s ease;
    flex: 1;
    text-align: center;
    font-size: 0.875rem;
    text-decoration: none;
    border: none;
    cursor: pointer;
  }

  .btn-primary:hover {
    background: var(--color-orange-shade-1);
    transform: scale(1.05);
  }

  .btn-secondary {
    background: var(--color-grey-2);
    color: var(--color-grey-8);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    transition: all 0.3s ease;
    flex: 1;
    font-size: 0.875rem;
    border: none;
    cursor: pointer;
  }

  .btn-secondary:hover {
    background: var(--color-grey-3);
    transform: scale(1.05);
  }

  /* Message aucun résultat */
  .no-results {
    text-align: center;
    padding: 3rem 0;
  }

  .no-results.hidden {
    display: none;
  }

  .no-results-icon {
    font-size: 4rem;
    color: var(--color-grey-5);
    margin-bottom: 1rem;
  }

  .no-results-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--color-grey-6);
    margin-bottom: 0.5rem;
  }

  .no-results-text {
    color: var(--color-grey-5);
  }

  @keyframes fadeIn {
    from { 
      opacity: 0; 
      transform: translateY(1.25rem); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }

  /* Responsive pour la recherche */
  @media (max-width: 640px) {
    .filters-container {
      flex-direction: column;
      align-items: stretch;
    }

    .search-container {
      min-width: auto;
      width: 100%;
    }
  }
</style>

<script>
  // Ton code existant (state management, fonctions...)
  let likedItems = new Set();

  function loadLikes() {
    try {
      const saved = localStorage.getItem('yumly_likes');
      if (saved) {
        likedItems = new Set(JSON.parse(saved));
      }
    } catch (e) {
      console.log('LocalStorage non disponible');
    }
  }

  function saveLikes() {
    try {
      localStorage.setItem('yumly_likes', JSON.stringify([...likedItems]));
    } catch (e) {
      console.log('LocalStorage non disponible');
    }
  }

  function voirLieu(city) {
    if (city && city !== 'Ville non spécifiée') {
      window.open(`https://www.google.com/maps/search/${encodeURIComponent(city)}`, '_blank');
    } else {
      alert('Localisation non disponible pour cette épicerie');
    }
  }

  function updateResultCount() {
    const visibleCards = document.querySelectorAll('.product-card:not([style*="display: none"])');
    const resultCount = document.getElementById('resultCount');
    const noResults = document.getElementById('noResults');
    const grid = document.getElementById('epicerieGrid');
    
    if (visibleCards.length === 0) {
      noResults.classList.remove('hidden');
      grid.style.display = 'none';
      resultCount.textContent = '';
    } else {
      noResults.classList.add('hidden');
      grid.style.display = 'grid';
      resultCount.textContent = `${visibleCards.length} épicerie${visibleCards.length > 1 ? 's' : ''} trouvée${visibleCards.length > 1 ? 's' : ''}`;
    }
  }

  function filterCards() {
    const activeButton = document.querySelector('.filter-btn.active');
    const filter = activeButton ? activeButton.dataset.filter : 'all';
    const searchTerm = document.getElementById('searchInput')?.value.toLowerCase().trim() || '';
    const cards = document.querySelectorAll('.product-card');

    cards.forEach(card => {
      const continent = card.dataset.continent || '';
      const city = (card.dataset.cityDisplay || '').toLowerCase();
      const name = (card.dataset.name || '').toLowerCase();

      let show = true;

      if (filter !== 'all' && continent !== filter) {
        show = false;
      }

      if (searchTerm) {
        const matchCity = city.includes(searchTerm);
        const matchName = name.includes(searchTerm);
        if (!matchCity && !matchName) {
          show = false;
        }
      }

      card.style.display = show ? 'block' : 'none';
    });

    updateResultCount();
  }
// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
  // Charger les likes au démarrage
  loadLikes();
  
  // Initialiser l'affichage des likes
  document.querySelectorAll('.like-btn').forEach(btn => {
    const id = btn.dataset.id;
    if (likedItems.has(id)) {
      btn.classList.add('liked');
    }
  });

  // Event listeners pour les boutons de filtre
  document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      // Retirer la classe active de tous les boutons
      document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
      
      // Ajouter la classe active au bouton cliqué
      this.classList.add('active');
      
      // Appliquer le filtrage
      filterCards();
    });
  });

  // Event listener pour la barre de recherche
  const searchInput = document.getElementById('searchInput');
  if (searchInput) {
    // Recherche en temps réel pendant la frappe
    searchInput.addEventListener('input', function() {
      filterCards();
    });
    
    // Recherche également sur "Enter"
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        filterCards();
      }
    });
  }

  // Event listener pour le bouton de recherche
  const searchBtn = document.querySelector('.search-btn');
  if (searchBtn) {
    searchBtn.addEventListener('click', function() {
      filterCards();
    });
  }

  // Event listeners pour les boutons like
  document.querySelectorAll('.like-btn').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const id = this.dataset.id;
      
      if (likedItems.has(id)) {
        likedItems.delete(id);
        this.classList.remove('liked');
      } else {
        likedItems.add(id);
        this.classList.add('liked');
      }
      
      saveLikes();
    });
  });

  // Initialiser le compteur de résultats
  updateResultCount();
});

// Rendre la fonction voirLieu globale
window.voirLieu = voirLieu;

</script>