---
// src/pages/login.astro
import Layout from '../../layouts/AuthLayout.astro';

import BigUserIcon from '../../assets/icons/big_user_icon.svg?raw';
import UserIcon from '../../assets/icons/icon_user.svg?raw';
import LockIcon from '../../assets/icons/icon_lock.svg?raw';
import GoogleLogo from '../../assets/icons/logo_google.svg?raw';

const POCKETBASE_URL = 'https://pb-yumly.leo-baudry.fr';
---

<Layout title="Connexion - Yumly">
  <div class="min-h-screen bg-(--color-orange-main) flex-col" x-data={`loginForm({ pocketbaseUrl: "${POCKETBASE_URL}" })`}>
    
  <!-- Header avec retour -->
    <div class="flex items-center p-4 pt-12 sm:pt-8 md:pt-12"> 
      <div class="w-full flex justify">
        <h1 class="text-6xl font-bold text-(--color-background) font-logo text-center w-full pl-12">yumly.</h1>
      </div>
      <div class="w-6 h-6 p-2"></div> 
    </div>

  <!-- Contenu principal -->
  <div class="flex-1 flex flex-col items-center px-6 pt-6 sm:pt-8"> 
      
    <!-- Grande icône utilisateur -->
    <div class="mb-10 sm:mb-12 relative"> 
      <div class="w-32 h-32 sm:w-40 sm:h-40 text-(--color-background) flex items-center justify-center mx-auto" set:html={BigUserIcon} /> 
    </div>

    <!-- Formulaire -->
    <form class="w-full max-w-xs sm:max-w-sm space-y-5" @submit.prevent="handleLogin"> 
        
    <!-- Bouton Google -->
    <button 
      type="button"
      @click="loginWithGoogle"
      :disabled="loading"
      class="w-full bg-(--color-background) rounded-full py-1 px-5 flex items-center justify-center text-sm 
      font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:opacity-60 disabled:cursor-not-allowed">
    <div class="flex-shrink-0 mr-2" set:html={GoogleLogo}>
    </div>
      <span class="text-gray-700">Se connecter avec Google</span>
    </button>

    <!-- Séparateur -->
    <div class="flex items-center my-4 sm:my-6">
      <hr class="flex-1 border-(--color-background) border-opacity-30">
        <span class="px-3 sm:px-4 text-(--color-background) text-xs sm:text-sm">Ou</span>
      <hr class="flex-1 border-(--color-background) border-opacity-30">
    </div>
   
    <!-- Champ Email -->
    <div class="relative">
      <div class="absolute left-4 top-1/2 transform -translate-y-1/2 z-10 text-orange-400 py-">
        <div set:html={UserIcon} /> 
      </div>
      <input 
        id="email" 
        name="email" 
        type="text"  
        x-model="form.email"
        required 
        class="w-full bg-(--color-background) bg-opacity-95 hover:bg-opacity-100 text-orange-700 placeholder-orange-400 rounded-full 
        py-4 pl-15 pr-4 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-orange-300 focus:ring-offset-2 
        focus:ring-offset-orange-500 transition-all duration-200 shadow-sm" 
        placeholder="Email">
    </div>

    <!-- Champ Mot de passe -->
    <div class="relative">
      <div class="absolute left-4 top-1/2 transform -translate-y-1/2 z-10 text-orange-400">
        <div set:html={LockIcon} /> 
      </div>
      <input 
        id="password" 
        name="password" 
        type="password" 
        x-model="form.password"
        required 
        class="w-full bg-(--color-background) bg-opacity-95 hover:bg-opacity-100 text-orange-700 placeholder-orange-400 rounded-full 
          py-4 pl-15 pr-4 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-orange-300 focus:ring-offset-2 
         focus:ring-offset-orange-500 transition-all duration-200 shadow-sm" 
        placeholder="Mot de passe">
    </div>

    <!-- Options -->
    <div class="flex items-center justify-between text-white text-xs sm:text-sm pt-1 pb-2"> 
      <label class="flex items-center cursor-pointer group">
        <input 
          type="checkbox" 
          x-model="form.remember"
          class="sr-only peer">
            
          <div class="relative w-4 h-4 bg-white bg-opacity-30 rounded border border-white border-opacity-50 peer-checked:bg-(--color-orange-shade-3) transition-colors">
            <svg x-show="form.remember" class="absolute inset-0 w-full h-full p-0.5 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
          </div>
          <span class="ml-2 text-orange-100 group-hover:text-white transition-colors">Se souvenir de moi</span>
        </label>
      <a href="/auth/forgot-password" class="text-orange-100 hover:text-white transition-colors">Mot de passe oublié ?</a>
    </div>

    <!-- Messages d'erreur -->
    <div x-show="error" x-cloak x-transition class="bg-red-700 bg-opacity-80 text-white px-4 py-2.5 rounded-full text-center text-sm">
      <p x-text="error"></p>
    </div>

    <!-- Bouton de connexion -->
    <div class="pt-2 sm:pt-4">
      <button 
        type="submit" 
        :disabled="loading"
        class="w-full bg-(--color-background) hover:bg-orange-50 border-2 border-orange-500 text-orange-500 rounded-full py-3 px-6 font-semibold text-sm sm:text-base transition-all duration-200 shadow-md hover:shadow-lg disabled:opacity-60 disabled:cursor-not-allowed disabled:bg-orange-50">
            
        <span x-show="!loading">Se connecter</span>
        <span x-show="loading" class="flex items-center justify-center">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-orange-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Connexion...
        </span>
      </button>
    </div>

    </form>

  <!-- Lien vers inscription -->
  <div class="mt-6 sm:mt-8 text-center pb-8">
    <p class="text-(--color-background) text-sm">
      Pas encore de compte ? 
      <a href="/auth/register" class="font-semibold text-white hover:underline">
        S'inscrire
      </a>
    </p>
  </div>

  </div>
  
  </div>
</Layout>

<script>
  // JavaScript from your "current working code" (which is robust)
  console.log("login.astro: SCRIPT TAG PARSED AND EXECUTING.");

  function defineLoginFormComponent() {
    console.log("login.astro: defineLoginFormComponent() CALLED.");
    Alpine.data('loginForm', (config) => {
      console.log("login.astro: Alpine.data('loginForm') EXECUTING. Config received:", config);
      
      let pbClient = null;
      if (typeof PocketBase !== 'undefined' && config && config.pocketbaseUrl) {
        try {
          pbClient = new PocketBase(config.pocketbaseUrl);
          console.log("loginForm: Client-side PocketBase instance created with URL:", config.pocketbaseUrl);
        } catch (e) {
          console.error("loginForm: Failed to create client-side PocketBase instance:", e);
        }
      } else {
        console.error("loginForm: PocketBase constructor or URL is missing.");
      }

      return {
        form: {
          email: '',
          password: '',
          remember: false // PocketBase gère "se souvenir de moi" via la durée du cookie
        },
        loading: false,
        error: null,
        init() {
          console.log("loginForm COMPONENT INSTANCE: init() called.");
          if (!pbClient) {
            this.error = "Erreur: client de base de données non initialisé.";
          }
        },
        async handleLogin() {
          console.log("loginForm COMPONENT INSTANCE: handleLogin called.");
          if (!pbClient) {
            this.error = "Client de base de données non disponible.";
            console.error("handleLogin: pbClient is not initialized!");
            return;
          }
          if (!this.form.email || !this.form.password) {
            this.error = "Veuillez entrer votre email et mot de passe.";
            return;
          }

          this.loading = true;
          this.error = null;

          try {
            console.log("loginForm: Attempting to login user:", this.form.email);
            const authData = await pbClient.collection('users').authWithPassword(
              this.form.email,
              this.form.password
            );
            
            console.log("loginForm: User logged in successfully:", authData.record);
            console.log("loginForm: Current auth status:", pbClient.authStore.isValid, "User:", pbClient.authStore.model);

            const urlParams = new URLSearchParams(window.location.search);
            const redirectTarget = urlParams.get('redirect');
            
            if (redirectTarget) {
              console.log("loginForm: Redirecting to:", redirectTarget);
              window.location.href = redirectTarget;
            } else {
              console.log("loginForm: No redirect target, redirecting to /");
              window.location.href = '/'; 
            }

          } catch (err) {
            console.error("loginForm: Error during login:", err);
            if (err.response && err.response.data && err.response.data.identity) { // PocketBase SDK v0.8+ errors are often in err.response
                this.error = err.response.data.identity.message;
            } else if (err.data && err.data.data && err.data.data.identity) { // Older or different error structure
                this.error = err.data.data.identity.message;
            } else if (err.message) {
                this.error = err.message;
            } else {
                this.error = "Identifiants incorrects ou erreur inconnue.";
            }
             console.error("Error displayed to user:", this.error);
          } finally {
            this.loading = false;
          }
        },
        async loginWithGoogle() {
          console.log('loginForm: Connexion Google initiée.');
          
          if (!pbClient) {
            this.error = "Client de base de données non disponible.";
            console.error("loginWithGoogle: pbClient is not initialized!");
            return;
          }

          this.error = null;
          this.loading = true;
          console.log('loginForm: Loading set to true.');

          let authCompleted = false;
          const resetTimeout = setTimeout(() => {
            if (!authCompleted) {
              console.log('loginForm: Timeout (8s) - Reset loading state after popup closure');
              this.loading = false;
              this.error = "L'authentification a échoué ou a été annulée. Veuillez réessayer."; // Adjusted message
            }
          }, 8000); // 8 seconds timeout

          try {
            const authData = await pbClient.collection('users').authWithOAuth2({ provider: 'google' });
            
            authCompleted = true;
            clearTimeout(resetTimeout); 
            console.log("loginForm: Google OAuth successful.", authData);
            // Gérer la redirection après connexion Google
            const urlParams = new URLSearchParams(window.location.search);
            const redirectTarget = urlParams.get('redirect');
            
            if (redirectTarget) {
              console.log("loginForm: Google - Redirecting to:", redirectTarget);
              window.location.href = redirectTarget;
            } else {
              console.log("loginForm: Google - No redirect target, redirecting to /");
              window.location.href = '/'; 
            }

          } catch (err) {
            authCompleted = true;
            clearTimeout(resetTimeout); 
            console.error("loginForm: !!! RAW Google OAuth error object:", err);
            // console.dir(err); // Useful for debugging

            let errorMessage = "Une erreur est survenue avec Google.";
            if (err && typeof err === 'object') {
              if (err.message) {
                if (err.message.toLowerCase().includes('popup closed') || err.message.toLowerCase().includes('cancelled') || err.message.toLowerCase().includes('user closed')) {
                  errorMessage = "Connexion Google annulée.";
                } else if (err.message.toLowerCase().includes('network request failed')) {
                  errorMessage = "Problème de connexion réseau.";
                } else {
                  errorMessage = `Erreur Google: ${err.message.substring(0,100)}`; // Limit length if too verbose
                }
              } else if (err.status === 0 || (err.originalError && err.originalError.isAbort)) { // PocketBase SDK sometimes wraps errors
                errorMessage = "Connexion Google annulée ou bloquée par le navigateur.";
              } else if (err.status) {
                errorMessage = `Erreur Google (${err.status}): Vérifiez la configuration OAuth.`;
              }
            }
            
            this.error = errorMessage;
            console.log("loginForm: Error message set to UI:", this.error);

          } finally {
            if (!authCompleted) { // Ensure loading is reset if an unexpected error occurred before try/catch could set authCompleted
              authCompleted = true; // Mark as completed to prevent timeout from firing later
              clearTimeout(resetTimeout);
            }
            console.log("loginForm: Google OAuth - Reached finally block. Setting loading to false.");
            this.loading = false;
            console.log("loginForm: Google OAuth - Loading set to false. Current error:", this.error);
          }
        }
      };
    });
    console.log("login.astro: Alpine.data('loginForm') DEFINITION REGISTERED.");
  }

  if (window.Alpine && window.Alpine.version) {
    console.log("login.astro: Alpine already initialized, defining component immediately.");
    defineLoginFormComponent();
  } else {
    console.log("login.astro: Alpine not yet initialized, waiting for alpine:init.");
    document.addEventListener('alpine:init', () => {
      console.log("login.astro: alpine:init event FIRED. Calling defineLoginFormComponent.");
      defineLoginFormComponent();
    });
  }
</script>