---
// src/pages/login.astro
import Layout from '../../layouts/Layout.astro';

const POCKETBASE_URL = 'https://pb-yumly.leo-baudry.fr'; // Ton URL PocketBase
---

<Layout title="Connexion - Yumly">
  <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8" x-data={`loginForm({ pocketbaseUrl: "${POCKETBASE_URL}" })`}>
      <div>
        <div class="mx-auto h-12 w-auto flex justify-center">
          <h1 class="text-3xl font-bold text-orange-600">Yumly</h1>
        </div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Connectez-vous à votre compte
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Ou 
          <a href="register" class="font-medium text-orange-600 hover:text-orange-500">
            créez un nouveau compte
          </a>
        </p>
      </div>

      <form class="mt-8 space-y-6" @submit.prevent="handleLogin">
        <div class="rounded-md shadow-sm -space-y-px">
          <div>
            <label for="email" class="sr-only">Email</label>
            <input 
              id="email" 
              name="email" 
              type="email" 
              x-model="form.email"
              required 
              class="relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-orange-500 focus:border-orange-500 focus:z-10 sm:text-sm" 
              placeholder="Adresse email">
          </div>
          <div>
            <label for="password" class="sr-only">Mot de passe</label>
            <input 
              id="password" 
              name="password" 
              type="password" 
              x-model="form.password"
              required 
              class="relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-orange-500 focus:border-orange-500 focus:z-10 sm:text-sm" 
              placeholder="Mot de passe">
          </div>
        </div>

        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input 
              id="remember-me" 
              name="remember-me" 
              type="checkbox" 
              x-model="form.remember"
              class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded">
            <label for="remember-me" class="ml-2 block text-sm text-gray-900">
              Se souvenir de moi
            </label>
          </div>

          <div class="text-sm">
            <a href="#" class="font-medium text-orange-600 hover:text-orange-500">
              Mot de passe oublié ?
            </a>
          </div>
        </div>

        <!-- Messages d'erreur -->
        <div x-show="error" class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          <p x-text="error"></p>
        </div>

        <div>
          <button 
            type="submit" 
            :disabled="loading"
            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed">
            
            <span x-show="!loading">Se connecter</span>
            <span x-show="loading" class="flex items-center">
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Connexion...
            </span>
          </button>
        </div>

        <!-- Séparateur -->
        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-gray-50 text-gray-500">Ou continuer avec</span>
            </div>
          </div>

          <div class="mt-6">
            <button 
              type="button"
              @click="loginWithGoogle"
              class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
              <svg class="w-5 h-5" viewBox="0 0 24 24">
                <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              <span class="ml-2">Google</span>
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  console.log("login.astro: SCRIPT TAG PARSED AND EXECUTING.");

  function defineLoginFormComponent() {
    console.log("login.astro: defineLoginFormComponent() CALLED.");
    Alpine.data('loginForm', (config) => {
      console.log("login.astro: Alpine.data('loginForm') EXECUTING. Config received:", config);
      
      let pbClient = null;
      if (typeof PocketBase !== 'undefined' && config && config.pocketbaseUrl) {
        try {
          pbClient = new PocketBase(config.pocketbaseUrl);
          console.log("loginForm: Client-side PocketBase instance created with URL:", config.pocketbaseUrl);
        } catch (e) {
          console.error("loginForm: Failed to create client-side PocketBase instance:", e);
        }
      } else {
        console.error("loginForm: PocketBase constructor or URL is missing.");
      }

      return {
        form: {
          email: '',
          password: '',
          remember: false // PocketBase gère "se souvenir de moi" via la durée du cookie
        },
        loading: false,
        error: null,
        init() {
          console.log("loginForm COMPONENT INSTANCE: init() called.");
          if (!pbClient) {
            this.error = "Erreur: client de base de données non initialisé.";
          }
        },
        async handleLogin() {
          console.log("loginForm COMPONENT INSTANCE: handleLogin called.");
          if (!pbClient) {
            this.error = "Client de base de données non disponible.";
            console.error("handleLogin: pbClient is not initialized!");
            return;
          }
          if (!this.form.email || !this.form.password) {
            this.error = "Veuillez entrer votre email et mot de passe.";
            return;
          }

          this.loading = true;
          this.error = null;

          try {
            console.log("loginForm: Attempting to login user:", this.form.email);
            // Appel direct à PocketBase
            const authData = await pbClient.collection('users').authWithPassword(
              this.form.email,
              this.form.password
            );
            
            console.log("loginForm: User logged in successfully:", authData.record);
            console.log("loginForm: Current auth status:", pbClient.authStore.isValid, "User:", pbClient.authStore.model);

            // Gérer la redirection après connexion
            const urlParams = new URLSearchParams(window.location.search);
            const redirectTarget = urlParams.get('redirect');
            
            if (redirectTarget) {
              console.log("loginForm: Redirecting to:", redirectTarget);
              window.location.href = redirectTarget;
            } else {
              // Rediriger vers une page par défaut après connexion (pas de /dashboard pour l'instant)
              console.log("loginForm: No redirect target, redirecting to /");
              window.location.href = '/'; 
            }

          } catch (err) {
            console.error("loginForm: Error during login:", err);
            if (err.data && err.data.data && err.data.data.identity) {
                this.error = err.data.data.identity.message // Souvent "Failed to authenticate."
            } else if (err.message) {
                this.error = err.message;
            } else {
                this.error = "Identifiants incorrects ou erreur inconnue.";
            }
             console.error("Error displayed to user:", this.error);
          } finally {
            this.loading = false;
          }
        },
        async loginWithGoogle() {
          console.log('loginForm: Connexion Google initiée. Loading set to true.');

          try {
            const authData = await pbClient.collection('users').authWithOAuth2({ provider: 'google' });
            console.log("loginForm: Google OAuth successful.", authData);
            window.location.href = '/'; 

          } catch (err) {
            
            console.error("!!! RAW Google OAuth error object:", err);
            console.dir(err); 

            this.error = "Une erreur est survenue avec Google. Vérifiez la console.";
            console.log("Error message set to UI:", this.error);

          } finally {
            console.log("loginForm: Reached finally block. Setting loading to false.");
            this.loading = false;
            console.log("loginForm: Loading set to false.");
          }
        }
      };
    });
    console.log("login.astro: Alpine.data('loginForm') DEFINITION REGISTERED.");
  }

  if (window.Alpine && window.Alpine.version) {
    console.log("login.astro: Alpine already initialized, defining component immediately.");
    defineLoginFormComponent();
  } else {
    console.log("login.astro: Alpine not yet initialized, waiting for alpine:init.");
    document.addEventListener('alpine:init', () => {
      console.log("login.astro: alpine:init event FIRED. Calling defineLoginFormComponent.");
      defineLoginFormComponent();
    });
  }
</script>