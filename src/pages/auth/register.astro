---
// src/pages/auth/register.astro
import Layout from '../../layouts/AuthLayout.astro';

const POCKETBASE_URL = 'https://pb-yumly.leo-baudry.fr'; 
---

<Layout title="Inscription - Yumly">
  <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8" x-data={`registerForm({ pocketbaseUrl: "${POCKETBASE_URL}" })`}>
      <div>
        {/* ... Titre et lien vers login ... */}
        <div class="mx-auto h-12 w-auto flex justify-center">
          <h1 class="text-3xl font-bold text-orange-600 font-logo">yumly</h1>
        </div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Créez votre compte
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Ou 
          <a href="/auth/login" class="font-medium text-orange-600 hover:text-orange-500">
            connectez-vous à votre compte existant
          </a>
        </p>
      </div>

  {/* === NOUVEAU : Div pour le message de succès === */}
      <div x-show="successMessage && !loading" 
           class="my-4 p-4 bg-green-100 border border-green-300 text-green-700 rounded-md shadow-sm"
           x-transition:enter="transition ease-out duration-300"
           x-transition:enter-start="opacity-0 transform scale-95"
           x-transition:enter-end="opacity-100 transform scale-100"
           x-transition:leave="transition ease-in duration-200"
           x-transition:leave-start="opacity-100 transform scale-100"
           x-transition:leave-end="opacity-0 transform scale-95">
        <p x-text="successMessage"></p>
      </div>
      {/* === FIN NOUVEAU SUCCÈS === */}

      {/* Formulaire d'inscription Email/Mot de passe */}
      <form class="mt-8 space-y-6" @submit.prevent="handleRegister">
        {/* ... Champs du formulaire (nom, email, password, confirmPassword) ... */}
        <div class="space-y-4">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700">Nom complet</label>
            <input id="name" name="name" type="text" x-model="form.name" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="Votre nom complet">
          </div>
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">Adresse email</label>
            <input id="email" name="email" type="email" x-model="form.email" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="votre@email.com">
          </div>
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">Mot de passe</label>
            <input id="password" name="password" type="password" x-model="form.password" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="Minimum 8 caractères">
            <p class="mt-1 text-xs text-gray-500">Le mot de passe doit contenir au moins 8 caractères</p>
          </div>
          <div>
            <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirmer le mot de passe</label>
            <input id="confirmPassword" name="confirmPassword" type="password" x-model="form.confirmPassword" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="Confirmez votre mot de passe">
          </div>
        </div>
        {/* ... Messages d'erreur et conditions ... */}
        <div x-show="form.password && form.confirmPassword && form.password !== form.confirmPassword" class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          <p class="text-sm">Les mots de passe ne correspondent pas</p>
        </div>
        <div x-show="error && !loading" class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          <p x-text="error"></p>
        </div>
        <div class="flex items-center">
          <input id="acceptTerms" name="acceptTerms" type="checkbox" x-model="form.acceptTerms" required class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded">
          <label for="acceptTerms" class="ml-2 block text-sm text-gray-900">
            J'accepte les <a href="#" class="text-orange-600 hover:text-orange-500">conditions d'utilisation</a> et la <a href="#" class="text-orange-600 hover:text-orange-500">politique de confidentialité</a>
          </label>
        </div>
        {/* Bouton de soumission du formulaire */}
  <div>
          <button 
            type="submit" 
            :disabled="loading"
            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed">
            
            <span x-show="!loading">S'inscrire</span>
            <span x-show="loading" class="flex items-center">
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Connexion...
            </span>
          </button>
        </div>
      </form>

      {/* === NOUVELLE SECTION POUR L'INSCRIPTION GOOGLE === */}
      <div class="mt-6">
        <div class="relative">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-300"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-(--color-background) text-gray-500">Ou s'inscrire avec</span>
          </div>
        </div>

        <div class="mt-6 pb-20">
          <button 
            type="button"
            @click="handleAuthWithGoogle" 
            :disabled="loading" 
            class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
            <svg class="w-5 h-5" viewBox="0 0 24 24"> {/* Icône Google */}
              <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            <span class="ml-2">Google</span>
          </button>
        </div>
      </div>
      {/* === FIN DE LA NOUVELLE SECTION === */}

    </div>
  </div>
</Layout>

<script>
  console.log("register.astro: SCRIPT TAG PARSED AND EXECUTING."); 

  function defineRegisterFormComponent() {
    console.log("register.astro: defineRegisterFormComponent() CALLED.");
    Alpine.data('registerForm', (config) => { 
      console.log("register.astro: Alpine.data('registerForm') EXECUTING. Config received:", config);
      
      let pbClient = null;
      if (typeof PocketBase !== 'undefined' && config && config.pocketbaseUrl) {
        try {
          pbClient = new PocketBase(config.pocketbaseUrl);
          console.log("registerForm: Client-side PocketBase instance created with URL:", config.pocketbaseUrl);
        } catch (e) {
          console.error("registerForm: Failed to create client-side PocketBase instance:", e);
        }
      } else {
        console.error("registerForm: PocketBase constructor or URL is missing...");
      }

      return {
        form: {
          name: '',
          email: '',
          password: '',
          confirmPassword: '',
          acceptTerms: false
        },
        loading: false,
        error: null,
        init() {
          console.log("registerForm COMPONENT INSTANCE: init() called.");
          if (!pbClient) {
            this.error = "Erreur: client DB non initialisé.";
          }
        },
        get isFormValid() {
          return this.form.name && 
                 this.form.email && 
                 this.form.password && 
                 this.form.password.length >= 8 &&
                 this.form.password === this.form.confirmPassword &&
                 this.form.acceptTerms;
        },

        // === LOGIQUE POUR L'INSCRIPTION PAR EMAIL/MOT DE PASSE ===
        async handleRegister() {
          console.log("registerForm COMPONENT INSTANCE: handleRegister (Email/Pass) called.");
          if (!pbClient) {
            this.error = "Client de base de données non disponible.";
            console.error("handleRegister: pbClient is not initialized!");
            return;
          }
          if (!this.isFormValid) {
            console.log("registerForm: Form (Email/Pass) is not valid.");
            return;
          }

          this.loading = true;
          this.error = null;
          
          try {
            const userData = {
              email: this.form.email,
              password: this.form.password,
              passwordConfirm: this.form.password,
              name: this.form.name,
            };

            console.log("registerForm: Attempting to create user (Email/Pass) with data:", userData);
            const newUserRecord = await pbClient.collection('users').create(userData);
            console.log("registerForm: User (Email/Pass) created successfully in PocketBase:", newUserRecord);

            try {
              console.log("registerForm: Attempting to auto-login user (Email/Pass):", this.form.email);
              await pbClient.collection('users').authWithPassword(this.form.email, this.form.password);
              console.log("registerForm: User (Email/Pass) auto-logged in. Status:", pbClient.authStore.isValid, "User:", pbClient.authStore.model);
              alert('Inscription réussie ! Vous êtes maintenant connecté.');
            } catch (authError) {
              console.error("registerForm: Auto-login (Email/Pass) failed after registration:", authError);
              alert('Inscription réussie, mais la connexion automatique a échoué. Veuillez vous connecter manuellement.');
            }
            
            window.location.href = '/';

          } catch (err) {
            console.error("registerForm: Error during user creation (Email/Pass) in PocketBase:", err);
            if (err.data && err.data.data) {
              let messages = [];
              for (const fieldKey in err.data.data) {
                if (err.data.data[fieldKey] && err.data.data[fieldKey].message) {
                  messages.push(` ${err.data.data[fieldKey].message}`);
                }
              }
              this.error = messages.length > 0 ? messages.join('') : "Une erreur est survenue.";
            } else if (err.message) {
              this.error = err.message;
            } else {
              this.error = "Une erreur inconnue est survenue lors de l'inscription.";
            }
            console.error("Error displayed to user (Email/Pass):", this.error);
          } finally {
            this.loading = false;
          }
        },
        // === FIN DE LA LOGIQUE POUR L'INSCRIPTION PAR EMAIL/MOT DE PASSE ===

        // === LOGIQUE POUR L'AUTHENTIFICATION GOOGLE ===
        async handleAuthWithGoogle() {
          console.log('[RegisterPage] handleAuthWithGoogle: Initiated.');
          if (!pbClient) {
            this.error = "Client DB non initialisé (Google OAuth).";
            console.error('[RegisterPage] handleAuthWithGoogle: pbClient is not initialized!');
            this.loading = false;
            return;
          }
        
          this.error = null;
          this.loading = true;
          console.log('[RegisterPage] handleAuthWithGoogle: loading set to true.');
        
          let authCompleted = false;
          const timeoutId = setTimeout(() => {
            if (!authCompleted && this.loading) { // Vérifier this.loading pour éviter de reset si déjà reset par un autre chemin
              console.warn('[RegisterPage] handleAuthWithGoogle: Timeout reached or popup closed without standard error, resetting loading state.');
              this.loading = false;
              // Si error est null, mettre une erreur de timeout générique
              this.error = this.error || "L'opération avec Google a pris trop de temps ou a été interrompue.";
              // Forcer Alpine à réévaluer l'UI si besoin
              // this.$nextTick(() => { console.log("UI update potentially forced after timeout"); });
            }
          }, 8000); // Timeout de 8 secondes (ajustable)
        
          try {
            const authData = await pbClient.collection('users').authWithOAuth2({ provider: 'google' });
            authCompleted = true; 
            clearTimeout(timeoutId);
            
            console.log("[RegisterPage] handleAuthWithGoogle: Google OAuth successful.", authData);
            alert('Authentification avec Google réussie !');
            window.location.href = '/';
        
          } catch (err) {
            authCompleted = true;
            clearTimeout(timeoutId);
            
            console.error("[RegisterPage] handleAuthWithGoogle: Google OAuth error:", err);
            console.dir(err);
        
            let errorMessage = "Une erreur est survenue avec Google.";
            if (err && err.isAbort) {
              errorMessage = "Authentification avec Google annulée.";
            } else if (err && err.message) {
              if (err.message.toLowerCase().includes("popup closed") || err.message.toLowerCase().includes("cancelled") || (err.originalError && err.originalError.name === 'AbortError')) {
                errorMessage = "La fenêtre Google a été fermée ou l'opération annulée.";
              } else {
                errorMessage = "Erreur Google : " + err.message;
              }
            }
            this.error = errorMessage;
            console.log("[RegisterPage] handleAuthWithGoogle: Error message set:", this.error);
        
          } finally {
            // Assurer que le timeout est bien nettoyé si l'opération s'est terminée avant
            if (!authCompleted) { // Si le try/catch n'a pas marqué comme complété
                clearTimeout(timeoutId);
            }
            // S'assurer que `loading` est remis à false si ce n'est pas déjà fait par le timeout
            // ou si l'opération s'est terminée (même en erreur) avant le timeout.
            if (this.loading) {
                console.log("[RegisterPage] handleAuthWithGoogle: Finally block - resetting loading state if still true.");
                this.loading = false;
            }
            console.log("[RegisterPage] handleAuthWithGoogle: Exiting finally. Loading state:", this.loading, "Error:", this.error);
          }
        }
        // === FIN DE LA LOGIQUE POUR L'AUTHENTIFICATION GOOGLE ===
      };
    });
    console.log("register.astro: Alpine.data('registerForm') DEFINITION REGISTERED with Alpine.");
  }

  // ... (logique d'attente d'alpine:init) ...
  if (window.Alpine && window.Alpine.version) {
    console.log("register.astro: Alpine already initialized, defining component immediately.");
    defineRegisterFormComponent();
  } else {
    console.log("register.astro: Alpine not yet initialized, waiting for alpine:init.");
    document.addEventListener('alpine:init', () => {
      console.log("register.astro: alpine:init event FIRED. Calling defineRegisterFormComponent.");
      defineRegisterFormComponent();
    });
  }
</script>