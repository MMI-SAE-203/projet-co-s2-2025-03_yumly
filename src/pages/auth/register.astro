---
// src/pages/auth/register.astro
import Layout from '../../layouts/AuthLayout.astro';

import BigUserIcon from '../../assets/icons/big_user_icon.svg?raw'; 
import UserIcon from '../../assets/icons/icon_user.svg?raw';
import MailIcon from '../../assets/icons/icon_mail.svg?raw';
import LockIcon from '../../assets/icons/icon_lock.svg?raw';
import GoogleLogo from '../../assets/icons/logo_google.svg?raw';

const POCKETBASE_URL = 'https://pb-yumly.leo-baudry.fr'; 
---

<Layout title="Inscription - Yumly">
  <div class="min-h-screen  bg-(--color-orange-main) flex-col" x-data={`registerForm({ pocketbaseUrl: "${POCKETBASE_URL}" })`}>
    
    <!-- Header -->
    <div class="flex items-center justify-between p-4 pt-12 sm:pt-8 md:pt-12">
        <h1 class="text-6xl font-bold text-(--color-background) font-logo text-center w-full pl-12">yumly.</h1>
      <div class="w-6 h-6 p-2"></div>
    </div>

    <!-- Contenu principal -->
    <div class="flex-1 flex flex-col items-center px-6 pt-2 sm:pt-4 pb-8 w-full">
      
      <div class="w-full max-w-xs sm:max-w-sm space-y-5"> 
        
    <!-- Grande icône utilisateur -->
    <div class="mb-6  sm:mb-8 relative"> 
      <div class="w-32 h-32 sm:w-40 sm:h-40 text-(--color-background) flex items-center justify-center mx-auto" set:html={BigUserIcon} /> 
    </div>

        
 {/* === NOUVELLE NOTIFICATION STYLÉE === */}
        <div x-show="showNotification" 
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform scale-95"
             x-transition:enter-end="opacity-100 transform scale-100"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform scale-100"
             x-transition:leave-end="opacity-0 transform scale-95"
             class="border-2 px-4 py-3 rounded-xl mb-4 shadow-lg text-sm font-medium" 
             :class="{
                'bg-green-600 bg-opacity-90 border-green-500 text-white': notificationType === 'success',
                'bg-red-700 bg-opacity-90 border-red-500 text-white': notificationType === 'error'
             }"
             role="alert">
            <div class="flex items-start justify-between">
                <div class="flex items-start">
                    <div class="flex-shrink-0">
                        <svg x-show="notificationType === 'success'" class="w-5 h-5 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>
                        <svg x-show="notificationType === 'error'" class="w-5 h-5 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p x-text="notificationMessage" class="whitespace-pre-line"></p>
                    </div>
                </div>
                <button @click="hideNotification()" 
                        class="ml-4 -mr-1 -mt-1 p-1 text-lg leading-none rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
                        :class="{
                            'text-white hover:text-green-100': notificationType === 'success',
                            'text-white hover:text-red-100': notificationType === 'error'
                        }"
                        aria-label="Fermer">
                    ×
                </button>
            </div>
        </div>
        {/* === FIN NOUVELLE NOTIFICATION STYLÉE === */}


        
    <!-- Bouton Google -->
      <button 
        type="button"
        @click="handleAuthWithGoogle" 
        :disabled="loading" 
      class="w-full bg-(--color-background) rounded-full py-1 px-5 flex items-center justify-center text-sm 
      font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:opacity-60 disabled:cursor-not-allowed">
    <div class="flex-shrink-0 mr-2" set:html={GoogleLogo}>
    </div>
      <span class="text-gray-700">S'inscrire avec Google</span>
    </button>


        <!-- 3. Séparateur avec "ou"  -->
        <div class="flex items-center">
          <hr class="flex-1 border-white border-opacity-30">
          <span class="px-3 sm:px-4 text-white text-xs sm:text-sm">Ou</span>
          <hr class="flex-1 border-white border-opacity-30">
        </div>

        <!-- *Formulaire d'inscription Email/Mot de passe -->
        <form class="space-y-4" @submit.prevent="handleRegister">
          
          <!-- Champ nom complet -->
          <div class="relative">
            <div class="absolute left-4 inset-y-0 flex items-center pointer-events-none z-10">
              <div class="text-orange-400" set:html={UserIcon} />
            </div>
            <input id="name" name="name" type="text" x-model="form.name" required 
                   class="w-full bg-orange-50 text-orange-700 placeholder-orange-400 rounded-full py-4 pl-15 pr-4 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-orange-300 shadow-sm" 
                   placeholder="Nom complet">
          </div>
          
          <!-- Champ Email -->
          <div class="relative">
            <div class="absolute left-4 inset-y-0 flex items-center pointer-events-none z-10">
               <div class=" text-orange-400" set:html={MailIcon} />
            </div>
            <input id="email" name="email" type="email" x-model="form.email" required 
                   class="w-full bg-orange-50 text-orange-700 placeholder-orange-400 rounded-full py-4 pl-15 pr-4 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-orange-300 shadow-sm" 
                   placeholder="Adresse e-mail">
          </div>

          <!-- Champ Mot de passe  -->
          <div class="relative">
            <div class="absolute left-4 inset-y-0 flex items-center pointer-events-none z-10">
              <div class=" text-orange-400" set:html={LockIcon} />
            </div>
            <input id="password" name="password" type="password" x-model="form.password" required 
                   class="w-full bg-orange-50 text-orange-700 placeholder-orange-400 rounded-full py-4 pl-15 pr-4 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-orange-300 shadow-sm" 
                   placeholder="Mot de passe">
          </div>

          <!-- Confirmation MDP -->
          <div class="relative">
             <div class="absolute left-4 inset-y-0 flex items-center pointer-events-none z-10">
              <div class=" text-orange-400" set:html={LockIcon} />
            </div>
            <input id="confirmPassword" name="confirmPassword" type="password" x-model="form.confirmPassword" required 
                   class="w-full bg-orange-50 text-orange-700 placeholder-orange-400 rounded-full py-4 pl-15 pr-4 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-orange-300 shadow-sm" 
                   placeholder="Confirmez le mot de passe">
          </div>
          <p class="mt-1 text-xs text-center text-orange-100 opacity-80 mb-2">Le mot de passe doit contenir au moins 8 caractères.</p>


          <!-- Message: Mots de passe ne correspondent pas -->
          <div x-show="form.password && form.confirmPassword && form.password !== form.confirmPassword" 
               class="bg-red-700 bg-opacity-90 text-white px-4 py-2.5 rounded-full text-center text-sm">
            <p>Les mots de passe ne correspondent pas</p>
          </div>
          
          <!-- Conditions d'utilisation -->
          <div class="flex items-start pt-1">
            <label for="acceptTerms" class="flex items-center cursor-pointer text-xs sm:text-sm text-orange-100 group">
              <input id="acceptTerms" name="acceptTerms" type="checkbox" x-model="form.acceptTerms" required 
                     class="sr-only peer">
              <div class="relative w-4 h-4 bg-white bg-opacity-30 rounded border border-white border-opacity-50 peer-checked:bg-(--color-orange-shade-3) transition-colors flex-shrink-0 mr-2">
                <svg x-show="form.acceptTerms" class="absolute inset-0 w-full h-full p-0.5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                </svg>
              </div>
              <span class="group-hover:text-white">
                J'accepte les <a href="/mentions" class="text-white underline hover:no-underline">conditions d'utilisation</a> et la <a href="politique" class="text-white underline hover:no-underline">politique de confidentialité</a>
              </span>
            </label>
          </div>
          
          <!-- Incription -->
          <div class="pt-2 sm:pt-4">
            <button 
              type="submit" 
              :disabled="loading || !isFormValid"
              class="w-full bg-white hover:bg-orange-100 border-2 border-orange-500 text-orange-500 rounded-full py-3 px-6 font-semibold text-sm sm:text-base transition-all duration-200 shadow-md hover:shadow-lg disabled:opacity-60 disabled:cursor-not-allowed disabled:bg-orange-100 disabled:border-orange-300 disabled:text-orange-300">
              <span x-show="!loading">S'inscrire</span>
              <span x-show="loading" class="flex items-center justify-center">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-orange-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Inscription...
              </span>
            </button>
          </div>
        </form>

        <!-- Séparateur -->
        <div class="flex items-center pt-2"> 
          <hr class="flex-1 border-white border-opacity-30">
        </div>

        <!-- Accès login -->
        <div class="text-center pt-0"> 
          <p class="text-sm text-orange-100">
            Déjà un compte ? 
            <a href="/auth/login/" class="font-medium text-white hover:underline">
              Connectez-vous
            </a>
          </p>
        </div>

      </div> 
    </div>
  </div>
</Layout>

<script>
  console.log("register.astro: SCRIPT TAG PARSED AND EXECUTING."); 

  function defineRegisterFormComponent() {
    console.log("register.astro: defineRegisterFormComponent() CALLED.");
    Alpine.data('registerForm', (config) => { 
      console.log("register.astro: Alpine.data('registerForm') EXECUTING. Config received:", config);
      
      let pbClient = null;
      if (typeof PocketBase !== 'undefined' && config && config.pocketbaseUrl) {
        try {
          pbClient = new PocketBase(config.pocketbaseUrl);
        } catch (e) {
          console.error("registerForm: Failed to create client-side PocketBase instance:", e);
        }
      } else {
        console.error("registerForm: PocketBase constructor or URL is missing...");
      }

      return {
        form: {
          name: '',
          email: '',
          password: '',
          confirmPassword: '',
          acceptTerms: false
        },
        loading: false,
        // this.error est maintenant géré par la notification
        
        // --- PROPRIÉTÉS POUR LA NOTIFICATION ---
        showNotification: false,
        notificationMessage: '',
        notificationType: '', // 'success' ou 'error'
        // --- FIN PROPRIÉTÉS NOTIFICATION ---

        init() {
          if (!pbClient) {
            this.showErrorNotification("Erreur de connexion au service. Veuillez réessayer plus tard.");
          }
        },

        // --- FONCTIONS POUR LA NOTIFICATION ---
        hideNotification() {
            this.showNotification = false;
        },
        showSuccessNotification(message) {
            this.notificationMessage = message;
            this.notificationType = 'success';
            this.showNotification = true;
            
            setTimeout(() => this.hideNotification(), 5000); 
        },
        showErrorNotification(message) {
            this.notificationMessage = message;
            this.notificationType = 'error';
            this.showNotification = true;
        },
        // --- FIN FONCTIONS NOTIFICATION ---
        
        get isFormValid() {
          return this.form.name && 
                 this.form.email && 
                 this.form.password && 
                 this.form.password.length >= 8 &&
                 this.form.password === this.form.confirmPassword &&
                 this.form.acceptTerms;
        },

        async handleRegister() {
          if (!pbClient) { 
            this.showErrorNotification("Service non disponible pour l'inscription."); 
            return; 
          }
          this.hideNotification(); 

          if (!this.isFormValid) {
            let validationError = "Veuillez vérifier les informations du formulaire.";
            if (!this.form.name) validationError = "Veuillez entrer votre nom complet.";
            else if (!this.form.email) validationError = "Veuillez entrer une adresse e-mail valide.";
            else if (!this.form.password) validationError = "Veuillez entrer un mot de passe.";
            else if (this.form.password.length < 8) validationError = "Le mot de passe doit contenir au moins 8 caractères.";
          
            else if (!this.form.acceptTerms) validationError = "Veuillez accepter les conditions d'utilisation.";
            
            this.showErrorNotification(validationError); 
            return;
          }

          this.loading = true;
          
          try {
            const userData = {
              email: this.form.email,
              password: this.form.password,
              passwordConfirm: this.form.password,
              name: this.form.name,
            };

            await pbClient.collection('users').create(userData);
            
            try {
              await pbClient.collection('users').authWithPassword(this.form.email, this.form.password);
              this.showSuccessNotification('Inscription réussie ! Vous êtes connecté. Redirection...'); 
              setTimeout(() => { window.location.href = '/'; }, 2500);
            } catch (authError) {
              console.error("registerForm: Auto-login failed after registration:", authError);
              this.showSuccessNotification('Inscription réussie ! Veuillez vous connecter manuellement. Redirection...'); 
              setTimeout(() => { window.location.href = '/auth/login/'; }, 3000);
            }
            
          } catch (err) {
            console.error("registerForm: Error during user creation:", err);
            let apiError = "Une erreur inconnue est survenue lors de l'inscription.";
            if (err.data && err.data.data) {
              let messages = Object.values(err.data.data).map(field => field.message);
              if (messages.length > 0) apiError = messages.join(' ').trim();
            } else if (err.message) {
              apiError = err.message;
            }
            this.showErrorNotification(apiError); 
          } finally {
            this.loading = false;
          }
        },
        
        async handleAuthWithGoogle() {
          if (!pbClient) { 
            this.showErrorNotification("Service Google non disponible."); 
            return; 
          }
          this.hideNotification(); 
          this.loading = true;
          let authCompleted = false;
          const timeoutId = setTimeout(() => {
            if (!authCompleted && this.loading) {
              this.loading = false;
              this.showErrorNotification("L'opération avec Google a pris trop de temps ou a été interrompue."); 
            }
          }, 8000);
        
          try {
            await pbClient.collection('users').authWithOAuth2({ provider: 'google' });
            authCompleted = true; 
            clearTimeout(timeoutId);
            this.showSuccessNotification('Authentification avec Google réussie ! Redirection...'); 
            setTimeout(() => { window.location.href = '/'; }, 2000);
        
          } catch (err) {
            authCompleted = true;
            clearTimeout(timeoutId);
            console.error("[RegisterPage] Google OAuth error:", err);
            let googleError = "Une erreur est survenue avec Google.";
            if (err?.isAbort) { 
              googleError = "Authentification Google annulée par l'utilisateur.";
            } else if (err?.message?.toLowerCase().includes("popup closed") || err?.message?.toLowerCase().includes("cancelled")) {
              googleError = "La fenêtre Google a été fermée ou l'opération annulée.";
            } else if (err?.message) {
              googleError = `Erreur Google : ${err.message.substring(0,100)}`;
            }
            this.showErrorNotification(googleError); 
          } finally {
            if (!authCompleted) { clearTimeout(timeoutId); }
            if (this.loading) { this.loading = false; }
          }
        }
      };
    });
  }

  if (window.Alpine && window.Alpine.version) {
    defineRegisterFormComponent();
  } else {
    document.addEventListener('alpine:init', () => {
      defineRegisterFormComponent();
    });
  }
</script>