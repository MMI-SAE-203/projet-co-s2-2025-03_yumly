---
// src/pages/auth/register.astro
import Layout from '../../layouts/Layout.astro';

const POCKETBASE_URL = 'https://pb-yumly.leo-baudry.fr'; // Ton URL PocketBase
---

<Layout title="Inscription - Yumly">
  <div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    {/* On passe l'URL de PocketBase au composant Alpine via x-data */}
    <div class="max-w-md w-full space-y-8" x-data={`registerForm({ pocketbaseUrl: "${POCKETBASE_URL}" })`}>
      <div>
        <div class="mx-auto h-12 w-auto flex justify-center">
          <h1 class="text-3xl font-bold text-orange-600">Yumly</h1>
        </div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Créez votre compte
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Ou 
          <a href="/auth/login" class="font-medium text-orange-600 hover:text-orange-500"> {/* Lien corrigé pour être absolu */}
            connectez-vous à votre compte existant
          </a>
        </p>
      </div>

      <form class="mt-8 space-y-6" @submit.prevent="handleRegister">
        {/* ... Ton formulaire HTML reste identique ... */}
        <div class="space-y-4">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700">Nom complet</label>
            <input id="name" name="name" type="text" x-model="form.name" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="Votre nom complet">
          </div>
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">Adresse email</label>
            <input id="email" name="email" type="email" x-model="form.email" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="votre@email.com">
          </div>
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">Mot de passe</label>
            <input id="password" name="password" type="password" x-model="form.password" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="Minimum 8 caractères">
            <p class="mt-1 text-xs text-gray-500">Le mot de passe doit contenir au moins 8 caractères</p>
          </div>
          <div>
            <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirmer le mot de passe</label>
            <input id="confirmPassword" name="confirmPassword" type="password" x-model="form.confirmPassword" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm" placeholder="Confirmez votre mot de passe">
          </div>
        </div>
        <div x-show="form.password && form.confirmPassword && form.password !== form.confirmPassword" class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          <p class="text-sm">Les mots de passe ne correspondent pas</p>
        </div>
        <div x-show="error" class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
          <p x-text="error"></p>
        </div>
        <div class="flex items-center">
          <input id="acceptTerms" name="acceptTerms" type="checkbox" x-model="form.acceptTerms" required class="h-4 w-4 text-orange-600 focus:ring-orange-500 border-gray-300 rounded">
          <label for="acceptTerms" class="ml-2 block text-sm text-gray-900">
            J'accepte les <a href="#" class="text-orange-600 hover:text-orange-500">conditions d'utilisation</a> et la <a href="#" class="text-orange-600 hover:text-orange-500">politique de confidentialité</a>
          </label>
        </div>
        <div>
          <button type="submit" :disabled="loading || !isFormValid" class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed">
            <span x-show="!loading">Créer mon compte</span>
            <span x-show="loading" class="flex items-center">
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
              Création...
            </span>
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  // Ce script s'exécute CÔTÉ CLIENT
  console.log("register.astro: SCRIPT TAG PARSED AND EXECUTING."); 

  function defineRegisterFormComponent() {
    console.log("register.astro: defineRegisterFormComponent() CALLED.");
    // La fonction passée à Alpine.data accepte maintenant un objet 'config'
    Alpine.data('registerForm', (config) => { 
      console.log("register.astro: Alpine.data('registerForm') EXECUTING. Config received:", config);
      
      // On crée une instance de PocketBase ici, côté client, avec l'URL passée.
      // Cela suppose que la librairie PocketBase (le constructeur) est disponible globalement (ex: via CDN dans Layout.astro)
      let pbClient = null;
      if (typeof PocketBase !== 'undefined' && config && config.pocketbaseUrl) {
        try {
          pbClient = new PocketBase(config.pocketbaseUrl);
          console.log("registerForm: Client-side PocketBase instance created with URL:", config.pocketbaseUrl);
        } catch (e) {
          console.error("registerForm: Failed to create client-side PocketBase instance:", e);
        }
      } else {
        console.error("registerForm: PocketBase constructor or URL is missing. PocketBase URL from config:", config ? config.pocketbaseUrl : 'N/A', "PocketBase constructor available:", typeof PocketBase);
      }

      return {
        form: {
          name: '',
          email: '',
          password: '',
          confirmPassword: '',
          acceptTerms: false
        },
        loading: false,
        error: null,
        init() {
          console.log("registerForm COMPONENT INSTANCE: init() called.");
          if (!pbClient) {
            this.error = "Erreur: client de base de données non initialisé.";
          }
        },
        get isFormValid() {
          return this.form.name && 
                 this.form.email && 
                 this.form.password && 
                 this.form.password.length >= 8 &&
                 this.form.password === this.form.confirmPassword &&
                 this.form.acceptTerms;
        },
        async handleRegister() {
          console.log("registerForm COMPONENT INSTANCE: handleRegister called.");
          if (!pbClient) {
            this.error = "Client de base de données non disponible.";
            console.error("handleRegister: pbClient is not initialized!");
            return;
          }
          if (!this.isFormValid) {
            console.log("registerForm: Form is not valid.");
            return;
          }

          this.loading = true;
          this.error = null;
          
          try {
            const userData = {
              email: this.form.email,
              password: this.form.password,
              passwordConfirm: this.form.password,
              name: this.form.name,
            };

            console.log("registerForm: Attempting to create user with data:", userData);
            const newUserRecord = await pbClient.collection('users').create(userData);
            console.log("registerForm: User created successfully in PocketBase:", newUserRecord);

            try {
              console.log("registerForm: Attempting to auto-login user:", this.form.email);
              await pbClient.collection('users').authWithPassword(this.form.email, this.form.password);
              console.log("registerForm: User auto-logged in. Current auth status:", pbClient.authStore.isValid, "User:", pbClient.authStore.model);
              alert('Inscription réussie ! Vous êtes maintenant connecté.');
            } catch (authError) {
              console.error("registerForm: Auto-login failed after registration:", authError);
              alert('Inscription réussie, mais la connexion automatique a échoué. Veuillez vous connecter manuellement.');
            }
            
            window.location.href = '/';

          } catch (err) {
            console.error("registerForm: Error during user creation in PocketBase:", err);
            if (err.data && err.data.data) {
              let messages = [];
              for (const fieldKey in err.data.data) {
                if (err.data.data[fieldKey] && err.data.data[fieldKey].message) {
                  messages.push(` ${err.data.data[fieldKey].message}`);
                }
              }
              this.error = messages.length > 0 ? messages.join('') : "Une erreur est survenue.";
            } else if (err.message) {
              this.error = err.message;
            } else {
              this.error = "Une erreur inconnue est survenue lors de l'inscription.";
            }
            console.error("Error displayed to user:", this.error);
          } finally {
            this.loading = false;
          }
        }
      };
    });
    console.log("register.astro: Alpine.data('registerForm') DEFINITION REGISTERED with Alpine.");
  }

  // S'assurer qu'Alpine est prêt avant de définir le composant
  if (window.Alpine && window.Alpine.version) {
    console.log("register.astro: Alpine already initialized, defining component immediately.");
    defineRegisterFormComponent();
  } else {
    console.log("register.astro: Alpine not yet initialized, waiting for alpine:init.");
    document.addEventListener('alpine:init', () => {
      console.log("register.astro: alpine:init event FIRED. Calling defineRegisterFormComponent.");
      defineRegisterFormComponent();
    });
  }
</script>